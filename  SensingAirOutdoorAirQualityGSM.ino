/* 
  Sketch generated by the Arduino IoT Cloud Thing
  
  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float co;
  float co2;
  float no2;
  float pm25;
  float pm25_concentration;
  float pm25_ratio;
  float voc;
  int pm25_lowpulseoccupancy;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include "Adafruit_SGP30.h"
Adafruit_SGP30 sgp;
#include <Multichannel_Gas_GMXXX.h>
GAS_GMXXX<TwoWire> gas;
long last_millis = 0;
int co2sensorPin = A1;    // select the input pin for the co2 sensor




//dust sensor code
int pin = 4;
unsigned long duration;
unsigned long starttime;
unsigned long sampletime_ms = 30000;//sampe 30s ;
unsigned long lowpulseoccupancy = 0;
float ratio = 0;
float concentration = 0;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  gas.begin(Wire, 0x08); // use the hardware I2C

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  //dust sensor code
    Serial.begin(9600);
    pinMode(pin,INPUT);
    starttime = millis();//get the current time;
}

void loop() {
  ArduinoCloud.update();
  //dust sensor
      duration = pulseIn(pin, LOW);
    lowpulseoccupancy = lowpulseoccupancy+duration;
 
    if ((millis()-starttime) > sampletime_ms)//if the sampel time == 30s
    {
        ratio = lowpulseoccupancy/(sampletime_ms*10.0);  // Integer percentage 0=>100
        concentration = 1.1*pow(ratio,3)-3.8*pow(ratio,2)+520*ratio+0.62; // using spec sheet curve
        Serial.print(lowpulseoccupancy);
        Serial.print(",");
        Serial.print(ratio);
        Serial.print(",");
        Serial.println(concentration);
        //dust sensor
         pm25_lowpulseoccupancy=(int)lowpulseoccupancy;

        pm25_ratio=(float)ratio;

        pm25_concentration=(float)concentration;
        pm25 = concentration;
        lowpulseoccupancy = 0;
        starttime = millis();
    }
    //dust sensor end

  
  // hqco2 sensor 
  co2= analogRead(co2sensorPin);
    int val;
      // GM302B C2H5CH sensor
  no2 = gas.getGM302B();
    // GM502B VOC sensor
  voc = gas.getGM502B();
    // GM702B CO sensor
  co = gas.getGM702B();
  

}




  
